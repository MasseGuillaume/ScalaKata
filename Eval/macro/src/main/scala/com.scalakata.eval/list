q""	EmptyTree
q"$value"	Literal
q"name"	Ident
q"$expr.$tname"	Select
q"$tpname.super[$tpname].$tname"	Select
q"$tpname.this"	This
q"$expr(...$exprss)"	Apply
q"$expr[..$tpts]"	TypeApply

q"$expr(..$exprs) = $expr"	Tree

q"throw $expr"	Throw

q"(..$exprs)"	Tree
q"{ ..$stats }"	Block
q"if ($expr) $expr else $expr"	If
q"$expr match { case ..$cases }"	Match
q"try $expr catch { case ..$cases } finally $expr"	Try
q"(..$params) => $expr"	Function

q"while ($expr) $expr"	LabelDef
q"do $expr while ($expr)"	LabelDef
q"for (..$enums) $expr"	Tree
q"for (..$enums) yield $expr"	Tree
q"new { ..$earlydefns } with ..$parents { $self => ..$stats }"	Tree

Definitions

q"$mods val $pat = $expr"
q"$mods var $tname: $tpt = $expr"

q"$mods def $tname[..$tparams](...$paramss): $tpt = $expr"
q"$mods class $tpname[..$tparams] $ctorMods(...$paramss) extends { ..$earlydefns } with ..$parents { $self => ..$stats }"	
q"$mods trait $tpname[..$tparams] extends { ..$earlydefns } with ..$parents { $self => ..$stats }"
q"$mods object $tname extends { ..$earlydefns } with ..$parents { $self => ..$body }"


q"package $ref { ..$topstats }"	!!! Not supported
q"package object $tname extends { ..$earlydefns } with ..$parents { $self => ..$stats }"	!!! Not suported
